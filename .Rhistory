# define inputs and outputs,  and params ----------------------------------
cat("DEBUG: defining inputs, outputs, and script parameters\n")
if(exists("snakemake")){
#files and parameters input by snakemake
rs <- snakemake@params$seed
bypass_intra <- snakemake@params$bypass_intra
view_fp <- snakemake@input$view
cores <- snakemake@threads[[1]]
output_dir <- snakemake@output[[1]]
}else{
#files for testing in Rstudio
rs <- 42
bypass_intra <- FALSE
view_fp <- 'data/working/ST/Misty/brain/Sample_304_C1/functional_view.rds'
cores <- 6
output_dir <- "mistyTest"
}
# MISTy
library(mistyR)
library(future)
# data manipulation
library(tidyverse)
library(purrr)
library(distances)
# plotting
library(ggplot2)
# define inputs and outputs,  and params ----------------------------------
cat("DEBUG: defining inputs, outputs, and script parameters\n")
if(exists("snakemake")){
#files and parameters input by snakemake
rs <- snakemake@params$seed
bypass_intra <- snakemake@params$bypass_intra
view_fp <- snakemake@input$view
cores <- snakemake@threads[[1]]
output_dir <- snakemake@output[[1]]
}else{
#files for testing in Rstudio
rs <- 42
bypass_intra <- FALSE
view_fp <- 'data/working/ST/Misty/brain/Sample_304_C1/functional_view.rds'
cores <- 6
output_dir <- "mistyTest"
}
misty.views <- readRDS(view_fp)
View(misty.views)
# MISTy
library(mistyR)
library(future)
# data manipulation
library(tidyverse)
library(purrr)
library(distances)
if(exists("snakemake")){
tissue <- snakemake@wildcards[[1]]
datas_fp <- lapply(snakemake@input, normalizePath)
print(snakemake@input)
cat('\n\n\n\n')
print(datas_fp)
if(length(datas_fp) == 3){
# names(datas_fp) <- c('coord', 'pathways', 'TFs')
view <- 'functional'
}else if(length(datas_fp) == 2){
# names(datas_fp) <- c('coord', 'CT')
view <- 'cell_types'
}else{
stop('The input has to contain either 2 or 3 files, corresponding (in order) to coordinates, and then either intra+para data (in 1 file), or intra and paraview (2 files). ', length(datas_fp), ' files were given:\n', paste(datas_fp, collapse = ' '))
}
sample <- basename(dirname(snakemake@output[[1]]))
}else{
tissue <- 'brain'
coord_fp <- normalizePath(paste('data/working/ST/Misty/', tissue, '_coordinates.csv', sep=""))
pathways_fp <- normalizePath(paste('data/working/ST/functional/', tissue, '_activities_pathways.csv', sep=""))
tf_fp <- normalizePath(paste('data/working/ST/functional/', tissue, '_activities_TFs.csv', sep=""))
sample <- "Sample_304_C1"
view <- 'activities'
datas_fp <- list(coord = coord_fp, pathways = pathways_fp, TFs = tf_fp)
}
# load data ---------------------------------------------------------------
datas <- lapply(datas_fp, function(fp){
data <- read_csv(fp)
data <- data %>% column_to_rownames(var = colnames(data)[1])
})
# filter data for specified sample ----------------------------------------
datas[[1]] <- datas[[1]] %>% filter(library_id == sample)
datas[2:length(datas)] <- lapply(datas[2:length(datas)], function(data){
data <- data[rownames(datas[[1]]),]
})
if(nrow(datas[[1]]) < 1) stop('There are no spots for sample ', sample, ' in the provided coordinates file:\n', coord_fp)
# determine distance between spots ----------------------------------------
# based on image coordinates instead of rows and columns
centroid <- round(colMeans(datas[[1]] %>% select(array_col, array_row)))
#%>% filter(array_col %in% (centroid[1]-18):(centroid[1]+18) &  array_row %in% (centroid[2]-18):(centroid[2]+18)) %>%
spots <- datas[[1]] %>% select(x,y)
#calculate the distance between selected spots
dM <- dist(spots, method = "euclidean", diag = TRUE, upper = TRUE, p = 2) %>% unique() %>% sort()
#shift by one and subtract
d <- abs(dM[1:(length(dM)-1)] - dM[2:length(dM)])
#average of shortest distances
radius <- dM[1:which(d > 0.1 * dM[1])[1]] %>% mean() %>% round()
cat('The distance between spots is', as.character(radius), '\n')
cat('Using', as.character(2*radius), 'as l parameter in paraview creation\n')
# make views --------------------------------------------------------------
intra.view <- create_initial_view(datas[[2]])
para.view <- create_initial_view(datas[[3]]) %>% add_paraview(datas[[1]] %>% select(x,y), l = radius * 2)
para.view <- para.view %>% rename_view(., old.name = 'intraview', new.name = 'intra_act')
para.view <- within(para.view, rm(misty.uniqueid))
misty.views <- intra.view %>% add_views(new.views = para.view)
View(misty.views)
grepl(names(misty.views), 'para')
grepl('para', names(misty.views))
names(misty.views)[grepl('para', names(misty.views))]
para.name <- names(misty.views)[grepl('para', names(misty.views))]
test <- misty.views
test %>% rename_view(., para.name, paraview, new.abbrev = 'para')
test %>% rename_view(., old.name = para.name, new.name = 'paraview', new.abbrev = 'para')
test <- test %>% rename_view(., old.name = para.name, new.name = 'paraview', new.abbrev = 'para')
View(test)
library(tidyr)
library(dplyr)
library(ggplot2)
library(mistyR)
cat("DEBUG: defining inputs, outputs, and script parameters\n")
if(exists("snakemake")){
tissue <- print(snakemake@wildcards$tissue)
metadata_fp <- snakemake@input[[1]]
result_folders <- unlist(snakemake@input[2:length(snakemake@input)])
}else{
tissue <- 'brain'
#files for testing in Rstudio
metadata_fp <- 'data/original/ST/metadata_visium_brain.csv'
result_folders <- c("data/working/ST/Misty/brain/Sample_158_A1/celltype_misty_model", "data/working/ST/Misty/brain/Sample_158_C1/celltype_misty_model", "data/working/ST/Misty/brain/Sample_304_A1/celltype_misty_model", "data/working/ST/Misty/brain/Sample_304_C1/celltype_misty_model")
}
samples <- result_folders %>% dirname() %>% basename()
metadata <- read.csv(metadata_fp)
if(tissue == 'brain'){
metadata <- metadata %>% unite(., 'sample', sample_name, sub_array, sep = '_') %>%
rename('mouse' = 'mice_id.bio_origin') %>% select(-sample_no) %>% arrange(sample)
metadata$condition <- as.factor(metadata$condition)
levels(metadata$condition) <- c('Flight', 'Control')
}else if(tissue == 'heart'){
metadata <- metadata %>% rename('sample' = 'Sample.Folder') %>% select(sample, condition, mouse) %>% arrange(sample)
metadata$condition <- as.factor(metadata$condition)
levels(metadata$condition) <- c('Flight', 'Control')
}
group <- 'Flight'
group.samples <- metadata %>% filter(condition == group)
which(result_folders %>% dirname() %>% basename() %in% group.samples$sample)
View(group.samples)
View(group.samples)
group_folders <- result_folders[keep]
keep <- which(result_folders %>% dirname() %>% basename() %in% group.samples$sample)
group_folders <- result_folders[keep]
result_folders %>% sort()
cat("DEBUG: defining inputs, outputs, and script parameters\n")
if(exists("snakemake")){
tissue <- print(snakemake@wildcards$tissue)
metadata_fp <- snakemake@input[[1]]
result_folders <- unlist(snakemake@input[2:length(snakemake@input)])
}else{
tissue <- 'brain'
#files for testing in Rstudio
metadata_fp <- 'data/original/ST/metadata_visium_brain.csv'
result_folders <- c("data/working/ST/Misty/brain/Sample_158_A1/celltype_misty_model", "data/working/ST/Misty/brain/Sample_158_C1/celltype_misty_model", "data/working/ST/Misty/brain/Sample_304_A1/celltype_misty_model", "data/working/ST/Misty/brain/Sample_304_C1/celltype_misty_model")
}
samples <- result_folders %>% dirname() %>% basename()
result_folders <-  result_folders %>% sort()
metadata <- read.csv(metadata_fp)
if(tissue == 'brain'){
metadata <- metadata %>% unite(., 'sample', sample_name, sub_array, sep = '_') %>%
rename('mouse' = 'mice_id.bio_origin') %>% select(-sample_no) %>% arrange(sample)
metadata$condition <- as.factor(metadata$condition)
levels(metadata$condition) <- c('Flight', 'Control')
}else if(tissue == 'heart'){
metadata <- metadata %>% rename('sample' = 'Sample.Folder') %>% select(sample, condition, mouse) %>% arrange(sample)
metadata$condition <- as.factor(metadata$condition)
levels(metadata$condition) <- c('Flight', 'Control')
}
samples <- result_folders %>% dirname() %>% basename()
group <- 'Flight'
group.samples <- metadata %>% filter(condition == group)
keep <- which(result_folders %>% dirname() %>% basename() %in% group.samples$sample)
group_folders <- result_folders[keep]
results <- group_folders %>% collect_results()
results %>% plot_improvement_stats()
results %>% plot_improvement_stats("intra.R2")
results %>% plot_view_contributions(trim = 1)
results %>% plot_interaction_heatmap('intra', trim = 1)
results %>% plot_interaction_heatmap('para', trim = 1)
results %>% plot_interaction_heatmap('para', trim = 1)
View(results)
tissue <- 'brain'
view <- 'celltype'
samples <- list.files(paste('data/original/ST/visium_data', tissue, sep = '_'))
samples <- list.files(paste('data/original/ST/visium_data', tissue, sep = '_')) %>% arrange()
samples <- list.files(paste('data/original/ST/visium_data', tissue, sep = '_')) %>% sort()
paste('results/ST/Misty','tissue', sep = .Platform$file.sep)
paste('results/ST/Misty', tissue, sep = .Platform$file.sep)
folders <- paste0(paste('results/ST/Misty', tissue, sep = .Platform$file.sep), samples)
folders <- paste0(paste('results/ST/Misty', tissue, sep = .Platform$file.sep), samples, '/')
folders <- paste0(paste('results/ST/Misty', tissue, sep = .Platform$file.sep), '/', samples, '/')
folders <- paste0(paste('results/ST/Misty', tissue, sep = .Platform$file.sep), '/', samples, '/', view)
folders <- paste0(paste('results/ST/Misty', tissue, sep = .Platform$file.sep), '/', samples, '/', view, '_misty_model')
view <- 'functional'
folders <- paste0(paste('results/ST/Misty', tissue, sep = .Platform$file.sep), '/', samples, '/', view, '_misty_model')
result_folders <- paste0(paste('results/ST/Misty', tissue, sep = .Platform$file.sep), '/', samples, '/', view, '_misty_model')
#files for testing in Rstudio
metadata_fp <- paste('data/original/ST/metadata_visium_', tissue,'.csv', sep = '')
result_folders <-  result_folders %>% sort()
samples <- result_folders %>% dirname() %>% basename()
metadata <- read.csv(metadata_fp)
if(tissue == 'brain'){
metadata <- metadata %>% unite(., 'sample', sample_name, sub_array, sep = '_') %>%
rename('mouse' = 'mice_id.bio_origin') %>% select(-sample_no) %>% arrange(sample)
metadata$condition <- as.factor(metadata$condition)
levels(metadata$condition) <- c('Flight', 'Control')
}else if(tissue == 'heart'){
metadata <- metadata %>% rename('sample' = 'Sample.Folder') %>% select(sample, condition, mouse) %>% arrange(sample)
metadata$condition <- as.factor(metadata$condition)
levels(metadata$condition) <- c('Flight', 'Control')
}
group.samples <- metadata %>% filter(condition == group)
keep <- which(result_folders %>% dirname() %>% basename() %in% group.samples$sample)
group_folders <- result_folders[keep]
results <- group_folders %>% collect_results()
results %>% plot_improvement_stats()
results %>% plot_improvement_stats("intra.R2")
View(results)
results %>% plot_view_contributions(trim = 1)
results %>% plot_interaction_heatmap('para', trim = 1)
results %>% plot_interaction_heatmap('para', trim = 1, cutoff = 0.2)
results %>% plot_interaction_heatmap('para', trim = 2, cutoff = 0.2)
results %>% plot_interaction_heatmap('para', trim = 2, cutoff = 2)
results %>% plot_interaction_heatmap('para', trim = 2, cutoff = 2, clean = TRUE)
results %>% plot_view_contributions(trim = 1)
view <- 'celltype'
samples <- list.files(paste('data/original/ST/visium_data', tissue, sep = '_')) %>% sort()
result_folders <- paste0(paste('results/ST/Misty', tissue, sep = .Platform$file.sep), '/', samples, '/', view, '_misty_model')
#files for testing in Rstudio
metadata_fp <- paste('data/original/ST/metadata_visium_', tissue,'.csv', sep = '')
result_folders <-  result_folders %>% sort()
samples <- result_folders %>% dirname() %>% basename()
metadata <- read.csv(metadata_fp)
if(tissue == 'brain'){
metadata <- metadata %>% unite(., 'sample', sample_name, sub_array, sep = '_') %>%
rename('mouse' = 'mice_id.bio_origin') %>% select(-sample_no) %>% arrange(sample)
metadata$condition <- as.factor(metadata$condition)
levels(metadata$condition) <- c('Flight', 'Control')
}else if(tissue == 'heart'){
metadata <- metadata %>% rename('sample' = 'Sample.Folder') %>% select(sample, condition, mouse) %>% arrange(sample)
metadata$condition <- as.factor(metadata$condition)
levels(metadata$condition) <- c('Flight', 'Control')
}
results %>% plot_improvement_stats("intra.R2")
results <- lapply(result_folders %>% collect_results(), function(x){
if('view' %in% colnames(x)){
x$view <- gsub('[[:digit:]]+', '', x$view)
x$view <- gsub('\\.$', '', x$view)
}
return(x)
})
results %>% plot_improvement_stats()
results %>% plot_view_contributions(trim = 1)
results %>% plot_improvement_stats("intra.R2")
results %>% plot_improvement_stats()
results %>% plot_improvement_stats("intra.R2")
if(view == 'functional'){
intra_name <- 'intra_act'
}else if (view == 'celltype'){
intra_name <- 'intra'
}
results %>% plot_improvement_stats()
results %>% plot_improvement_stats(paste(intra_name, ".R2", sep = ''))
results %>% plot_view_contributions(trim = 1)
results %>% plot_interaction_heatmap(intra_name, trim = 1)
results %>% plot_interaction_heatmap('para', trim = 1)
view <- 'functional'
samples <- list.files(paste('data/original/ST/visium_data', tissue, sep = '_')) %>% sort()
result_folders <- paste0(paste('results/ST/Misty', tissue, sep = .Platform$file.sep), '/', samples, '/', view, '_misty_model')
#files for testing in Rstudio
metadata_fp <- paste('data/original/ST/metadata_visium_', tissue,'.csv', sep = '')
result_folders <-  result_folders %>% sort()
samples <- result_folders %>% dirname() %>% basename()
metadata <- read.csv(metadata_fp)
if(tissue == 'brain'){
metadata <- metadata %>% unite(., 'sample', sample_name, sub_array, sep = '_') %>%
rename('mouse' = 'mice_id.bio_origin') %>% select(-sample_no) %>% arrange(sample)
metadata$condition <- as.factor(metadata$condition)
levels(metadata$condition) <- c('Flight', 'Control')
}else if(tissue == 'heart'){
metadata <- metadata %>% rename('sample' = 'Sample.Folder') %>% select(sample, condition, mouse) %>% arrange(sample)
metadata$condition <- as.factor(metadata$condition)
levels(metadata$condition) <- c('Flight', 'Control')
}
results <- lapply(result_folders %>% collect_results(), function(x){
if('view' %in% colnames(x)){
x$view <- gsub('[[:digit:]]+', '', x$view)
x$view <- gsub('\\.$', '', x$view)
}
return(x)
})
results %>% plot_improvement_stats()
results %>% plot_improvement_stats(paste(intra_name, ".R2", sep = ''))
if(view == 'functional'){
intra_name <- 'intra_act'
}else if (view == 'celltype'){
intra_name <- 'intra'
}
results %>% plot_improvement_stats()
results %>% plot_improvement_stats(paste(intra_name, ".R2", sep = ''))
results %>% plot_improvement_stats("intra.R2")
results %>% plot_view_contributions(trim = 1)
results %>% plot_interaction_heatmap(intra_name, trim = 1)
results %>% plot_interaction_heatmap(intra_name, trim = 2, cutoff = 2, clean = TRUE)
results %>% plot_interaction_heatmap('para', trim = 1)
results %>% plot_interaction_heatmap('para', trim = 2, cutoff = 2, clean = TRUE)
group.samples <- metadata %>% filter(condition == group)
keep <- which(result_folders %>% dirname() %>% basename() %in% group.samples$sample)
group_folders <- result_folders[keep]
results <- group_folders %>% collect_results()
results %>% plot_improvement_stats()
results %>% plot_improvement_stats("intra.R2")
results %>% plot_view_contributions(trim = 1)
results %>% plot_interaction_heatmap(intra_name, trim = 1)
results %>% plot_interaction_heatmap(intra_name, trim = 2, cutoff = 2, clean = TRUE)
results %>% plot_interaction_heatmap('para', trim = 2, cutoff = 2, clean = TRUE)
view <- 'celltype'
samples <- list.files(paste('data/original/ST/visium_data', tissue, sep = '_')) %>% sort()
result_folders <- paste0(paste('results/ST/Misty', tissue, sep = .Platform$file.sep), '/', samples, '/', view, '_misty_model')
#files for testing in Rstudio
metadata_fp <- paste('data/original/ST/metadata_visium_', tissue,'.csv', sep = '')
result_folders <-  result_folders %>% sort()
samples <- result_folders %>% dirname() %>% basename()
metadata <- read.csv(metadata_fp)
if(tissue == 'brain'){
metadata <- metadata %>% unite(., 'sample', sample_name, sub_array, sep = '_') %>%
rename('mouse' = 'mice_id.bio_origin') %>% select(-sample_no) %>% arrange(sample)
metadata$condition <- as.factor(metadata$condition)
levels(metadata$condition) <- c('Flight', 'Control')
}else if(tissue == 'heart'){
metadata <- metadata %>% rename('sample' = 'Sample.Folder') %>% select(sample, condition, mouse) %>% arrange(sample)
metadata$condition <- as.factor(metadata$condition)
levels(metadata$condition) <- c('Flight', 'Control')
}
results <- lapply(result_folders %>% collect_results(), function(x){
if('view' %in% colnames(x)){
x$view <- gsub('[[:digit:]]+', '', x$view)
x$view <- gsub('\\.$', '', x$view)
}
return(x)
})
if(view == 'functional'){
intra_name <- 'intra_act'
}else if (view == 'celltype'){
intra_name <- 'intra'
}
results %>% plot_improvement_stats()
results %>% plot_improvement_stats("intra.R2")
results %>% plot_view_contributions(trim = 1)
results %>% plot_interaction_heatmap(intra_name, trim = 2, cutoff = 2, clean = TRUE)
results %>% plot_interaction_heatmap(intra_name, trim = 1, cutoff = 2, clean = TRUE)
results %>% plot_interaction_heatmap(intra_name, trim = 1, cutoff = 1, clean = TRUE)
results %>% plot_interaction_heatmap(intra_name, trim = 1, cutoff = 1, clean = FALSE)
if(view == 'functional'){
intra_name <- 'intra_act'
cleaning <- TRUE
}else if (view == 'celltype'){
intra_name <- 'intra'
cleaning <- FALSE
}
results %>% plot_interaction_heatmap(intra_name, trim = 2, cutoff = 2, clean = cleaning)
results %>% plot_interaction_heatmap(intra_name, trim = 2, cutoff = 1, clean = cleaning)
results %>% plot_view_contributions(trim = 1)
results %>% plot_view_contributions()
results %>% plot_interaction_heatmap(intra_name, trim = 1, cutoff = 1, clean = cleaning)
results %>% plot_interaction_heatmap('para', trim = 1, cutoff = 1, clean = cleaning)
group.samples <- metadata %>% filter(condition == group)
keep <- which(result_folders %>% dirname() %>% basename() %in% group.samples$sample)
group_folders <- result_folders[keep]
results <- group_folders %>% collect_results()
results %>% plot_improvement_stats()
results %>% plot_improvement_stats("intra.R2")
results %>% plot_view_contributions(trim = 1)
results %>% plot_interaction_heatmap(intra_name, trim = 1, cutoff = 1, clean = cleaning)
results %>% plot_interaction_heatmap('para', trim = 1, cutoff = 1, clean = cleaning)
if(exists("snakemake")){
tissue <- snakemake@wildcards$tissue
view <- snakemake@wildcards$view_type
plot_params <- snakemake@params[[1]]
metadata_fp <- snakemake@input[[1]]
result_folders <- unlist(snakemake@input[2:length(snakemake@input)])
}else{
tissue <- 'brain'
view <- 'functional'
samples <- list.files(paste('data/original/ST/visium_data', tissue, sep = '_')) %>% sort()
result_folders <- paste0(paste('results/ST/Misty', tissue, sep = .Platform$file.sep), '/', samples, '/', view, '_misty_model')
#files for testing in Rstudio
metadata_fp <- paste('data/original/ST/metadata_visium_', tissue,'.csv', sep = '')
}
result_folders <-  result_folders %>% sort()
samples <- result_folders %>% dirname() %>% basename()
metadata <- read.csv(metadata_fp)
if(tissue == 'brain'){
metadata <- metadata %>% unite(., 'sample', sample_name, sub_array, sep = '_') %>%
rename('mouse' = 'mice_id.bio_origin') %>% select(-sample_no) %>% arrange(sample)
metadata$condition <- as.factor(metadata$condition)
levels(metadata$condition) <- c('Flight', 'Control')
}else if(tissue == 'heart'){
metadata <- metadata %>% rename('sample' = 'Sample.Folder') %>% select(sample, condition, mouse) %>% arrange(sample)
metadata$condition <- as.factor(metadata$condition)
levels(metadata$condition) <- c('Flight', 'Control')
}
results <- lapply(result_folders %>% collect_results(), function(x){
if('view' %in% colnames(x)){
x$view <- gsub('[[:digit:]]+', '', x$view)
x$view <- gsub('\\.$', '', x$view)
}
return(x)
})
if(view == 'functional'){
intra_name <- 'intra_act'
cleaning <- TRUE
}else if (view == 'celltype'){
intra_name <- 'intra'
cleaning <- FALSE
}
results %>% plot_view_contributions(trim = 1)
results %>% plot_interaction_heatmap(intra_name, trim = 1, cutoff = 1, clean = cleaning)
results %>% plot_interaction_heatmap(intra_name, trim = 2, cutoff = 2, clean = cleaning)
results %>% plot_interaction_heatmap('para', trim = 2, cutoff = 2, clean = cleaning)
results %>% plot_interaction_heatmap(intra_name, trim = 2, cutoff = 1, clean = cleaning)
results %>% plot_interaction_heatmap(intra_name, trim = 2, cutoff = 1.5, clean = cleaning)
results %>% plot_interaction_heatmap('para', trim = 2, cutoff = 1.5, clean = cleaning)
tissue <- 'heart'
view <- 'functional'
samples <- list.files(paste('data/original/ST/visium_data', tissue, sep = '_')) %>% sort()
result_folders <- paste0(paste('results/ST/Misty', tissue, sep = .Platform$file.sep), '/', samples, '/', view, '_misty_model')
#files for testing in Rstudio
metadata_fp <- paste('data/original/ST/metadata_visium_', tissue,'.csv', sep = '')
result_folders <-  result_folders %>% sort()
samples <- result_folders %>% dirname() %>% basename()
metadata <- read.csv(metadata_fp)
if(tissue == 'brain'){
metadata <- metadata %>% unite(., 'sample', sample_name, sub_array, sep = '_') %>%
rename('mouse' = 'mice_id.bio_origin') %>% select(-sample_no) %>% arrange(sample)
metadata$condition <- as.factor(metadata$condition)
levels(metadata$condition) <- c('Flight', 'Control')
}else if(tissue == 'heart'){
metadata <- metadata %>% rename('sample' = 'Sample.Folder') %>% select(sample, condition, mouse) %>% arrange(sample)
metadata$condition <- as.factor(metadata$condition)
levels(metadata$condition) <- c('Flight', 'Control')
}
results <- lapply(result_folders %>% collect_results(), function(x){
if('view' %in% colnames(x)){
x$view <- gsub('[[:digit:]]+', '', x$view)
x$view <- gsub('\\.$', '', x$view)
}
return(x)
})
if(view == 'functional'){
intra_name <- 'intra_act'
cleaning <- TRUE
}else if (view == 'celltype'){
intra_name <- 'intra'
cleaning <- FALSE
}
results %>% plot_improvement_stats()
results %>% plot_improvement_stats("intra.R2")
results %>% plot_view_contributions(trim = 1)
results %>% plot_interaction_heatmap(intra_name, trim = 2, cutoff = 1.5, clean = cleaning)
results %>% plot_interaction_heatmap(intra_name, trim = 1.5, cutoff = 1.5, clean = cleaning)
results %>% plot_interaction_heatmap('para', trim = 1.5, cutoff = 1.5, clean = cleaning)
results %>% plot_interaction_heatmap(intra_name, trim = 2, cutoff = 1.5, clean = cleaning)
results %>% plot_interaction_heatmap('para', trim = 2, cutoff = 1.5, clean = cleaning)
results %>% plot_interaction_heatmap('para', trim = 1.5, cutoff = 1.5, clean = cleaning)
results %>% plot_interaction_heatmap('para', trim = 1.5, cutoff = 1, clean = cleaning)
results %>% plot_interaction_heatmap(intra_name, trim = 2, cutoff = 1, clean = cleaning)
plot_params <- list(trim = 1, cutoff = 1)
group <- 'Control'
group.samples <- metadata %>% filter(condition == group)
keep <- which(result_folders %>% dirname() %>% basename() %in% group.samples$sample)
group_folders <- result_folders[keep]
results <- group_folders %>% collect_results()
group.samples <- metadata %>% filter(condition == group)
group.samples <- metadata %>% filter(condition == group)
keep <- which(result_folders %>% dirname() %>% basename() %in% group.samples$sample)
group_folders <- result_folders[keep]
group.samples <- metadata %>% filter(condition == group)
keep <- which(result_folders %>% dirname() %>% basename() %in% group.samples$sample)
View(group.samples)
result_folders %>% dirname() %>% basename()
group.samples$sample
metadata <- read.csv(metadata_fp)
if(tissue == 'brain'){
metadata <- metadata %>% unite(., 'sample', sample_name, sub_array, sep = '_') %>%
rename('mouse' = 'mice_id.bio_origin') %>% select(-sample_no) %>% arrange(sample)
metadata$condition <- as.factor(metadata$condition)
levels(metadata$condition) <- c('Flight', 'Control')
}else if(tissue == 'heart'){
metadata <- metadata %>% rename('sample' = 'Sample.Folder') %>% select(sample, condition, mouse) %>% arrange(sample)
metadata$condition <- as.factor(metadata$condition)
levels(metadata$condition) <- c('Flight', 'Control')
metadata$sample <- gsub('-', '_', metadata$sample)
}
group.samples <- metadata %>% filter(condition == group)
keep <- which(result_folders %>% dirname() %>% basename() %in% group.samples$sample)
group_folders <- result_folders[keep]
results <- group_folders %>% collect_results()
results %>% plot_improvement_stats()
results %>% plot_improvement_stats("intra.R2")
results %>% plot_view_contributions(trim = 1)
results %>% plot_interaction_heatmap(intra_name, trim = plot_params$trim, cutoff = plot_params$cutoff, clean = cleaning)
results %>% plot_interaction_heatmap('para', trim = plot_params$trim, cutoff = plot_params$cutoff, clean = cleaning)

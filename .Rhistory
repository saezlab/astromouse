library(Seurat)
input_fp <- 'MO_brain_annotated.rds'
input_fp <- 'data/original/MO/MO_brain_annotated.rds'
data <- readRDS(input_fp)
View(data)
unique(data@meta.data$clusters)
sort(unique(data@meta.data$clusters))
install.packages('composition')
install.packages('compositions')
library(Seurat)
input_fp <- 'results/ST/ST_brain_deconvoluted.csv'
data <- readRDS(input_fp)
input_fp <- 'data/original/ST/ST_brain_deconvoluted.rds'
data <- readRDS(input_fp)
if(exists("snakemake")){
assay <- as.character(snakemake@params$assay)
cellprop_cutoff = as.numeric(snakemake@params$cellprop_cutoff)
}else{
assay <- 'hvg2000'
}
chosen <- grep(paste('^',assay,'$', sep = ''), names(data@assays), value = TRUE)
if(length(chosen) == 0) stop('The assay ', assay, ' does not exist in the Seurat object. Choose one of the following:\n', paste(names(data@assays), collapse = ' '))
dec <- t(as.matrix(Seurat::GetAssayData(data, slot = 'data', assay = chosen)))
View(dec)
install.packages('compositions')
test <- compositions::acomp(dec, detectionlimit = 0.05)
View(test)
1.864054e-02
test <- compositions::acomp(dec, detectionlimit = 0.05, BDL = 0)
dec[dec < cellprop_cutoff] <- 0
cellprop_cutoff <- 0.05
dec[dec < cellprop_cutoff] <- 0
test <- compositions::acomp(dec, detectionlimit = 0.05, BDL = 0)
test <- compositions::acomp(dec, detectionlimit = 0.05)
View(test)
test <- compositions::acomp(dec)
View(test)
View(dec)
sum(test[1,:])
sum(test[1])
sum(test[2])
0.07763448 + 0.06073145 + 0.23321963 + 0.38042944 + 0.24798500
View(dec)
dec <- t(as.matrix(Seurat::GetAssayData(data, slot = 'data', assay = chosen)))
dec[dec < cellprop_cutoff] <- 0
View(dec)
dec <- compositions::acomp(dec)
View(dec)
dec <- t(as.matrix(Seurat::GetAssayData(data, slot = 'data', assay = chosen)))
dec[dec < cellprop_cutoff] <- 0
dec <- compositions::acomp(dec) %>% as.matrix()
dec <- t(as.matrix(Seurat::GetAssayData(data, slot = 'data', assay = chosen)))
dec[dec < cellprop_cutoff] <- 0
dec <- as.matrix(compositions::acomp(dec))
dec <- t(as.matrix(Seurat::GetAssayData(data, slot = 'data', assay = chosen)))
dec[dec < cellprop_cutoff] <- 0
dec <- as.data.frame(compositions::acomp(dec))
View(dec)
output_fp <- 'test.csv'
write.csv(dec, file = output_fp)
# MISTy
library(mistyR)
library(future)
# data manipulation
library(tidyverse)
library(purrr)
library(distances)
if(exists("snakemake")){
tissue <- snakemake@wildcards[[1]]
datas_fp <- lapply(snakemake@input, normalizePath)
print(snakemake@input)
cat('\n\n\n\n')
print(datas_fp)
if(length(datas_fp) == 3){
}else if(length(datas_fp) == 2){
}else{
stop('The input has to contain either 2 or 3 files, corresponding (in order) to coordinates, and then either intra+para data (in 1 file), or intra and paraview (2 files). ', length(datas_fp), ' files were given:\n', paste(datas_fp, collapse = ' '))
}
sample <- basename(dirname(snakemake@output[[1]]))
output_fp <- snakemake@output[[1]]
}else{
tissue <- 'brain'
coord_fp <- normalizePath(paste('results/ST/Misty/', tissue, '_coordinates.csv', sep=""))
celltype_fp <- normalizePath(paste('results/ST/ST_', tissue, '_deconvoluted.csv', sep=""))
pathways_fp <- normalizePath(paste('results/ST/functional/', tissue, '_activities_pathways.csv', sep=""))
tf_fp <- normalizePath(paste('results/ST/functional/', tissue, '_activities_TFs.csv', sep=""))
sample <- "Sample_304_C1"
output_fp <- paste('results/ST/Misty/', tissue,'/', sample, '/celltype_view.rds', sep = '')
datas_fp <- list(coord = coord_fp, cellprop = celltype_fp)
}
view <- gsub('_view.rds','', basename(output_fp))
datas <- lapply(datas_fp, function(fp){
data <- read_csv(fp)
data <- data %>% column_to_rownames(var = colnames(data)[1])
})
datas[[1]] <- datas[[1]] %>% filter(library_id == sample)
datas[2:length(datas)] <- lapply(datas[2:length(datas)], function(data){
data <- data[rownames(datas[[1]]),]
})
View(datas_fp)
View(datas)
if(exists("snakemake")){
tissue <- snakemake@wildcards[[1]]
datas_fp <- lapply(snakemake@input, normalizePath)
print(snakemake@input)
cat('\n\n\n\n')
print(datas_fp)
if(length(datas_fp) == 3){
}else if(length(datas_fp) == 2){
}else{
stop('The input has to contain either 2 or 3 files, corresponding (in order) to coordinates, and then either intra+para data (in 1 file), or intra and paraview (2 files). ', length(datas_fp), ' files were given:\n', paste(datas_fp, collapse = ' '))
}
sample <- basename(dirname(snakemake@output[[1]]))
output_fp <- snakemake@output[[1]]
}else{
tissue <- 'brain'
coord_fp <- normalizePath(paste('results/ST/Misty/', tissue, '_coordinates.csv', sep=""))
celltype_fp <- normalizePath(paste('results/ST/ST_', tissue, '_deconvoluted.csv', sep=""))
pathways_fp <- normalizePath(paste('results/ST/functional/', tissue, '_activities_pathways.csv', sep=""))
tf_fp <- normalizePath(paste('results/ST/functional/', tissue, '_activities_TFs.csv', sep=""))
sample <- "Sample_158_B1"
output_fp <- paste('results/ST/Misty/', tissue,'/', sample, '/celltype_view.rds', sep = '')
datas_fp <- list(coord = coord_fp, cellprop = celltype_fp)
}
view <- gsub('_view.rds','', basename(output_fp))
datas <- lapply(datas_fp, function(fp){
data <- read_csv(fp)
data <- data %>% column_to_rownames(var = colnames(data)[1])
})
datas[[1]] <- datas[[1]] %>% filter(library_id == sample)
datas[2:length(datas)] <- lapply(datas[2:length(datas)], function(data){
data <- data[rownames(datas[[1]]),]
})
View(datas)
if(nrow(datas[[1]]) < 1) stop('There are no spots for sample ', sample, ' in the provided coordinates file:\n', coord_fp)
View(datas_fp)
datas <- lapply(datas_fp, function(fp){
data <- read_csv(fp)
data <- data %>% column_to_rownames(var = colnames(data)[1])
})
datas[[1]] <- datas[[1]] %>% filter(library_id == sample)
datas[2:length(datas)] <- lapply(datas[2:length(datas)], function(data){
data <- data[rownames(datas[[1]]),]
})
View(datas)
# MISTy
library(mistyR)
library(future)
# data manipulation
library(tidyverse)
library(purrr)
library(distances)
if(exists("snakemake")){
tissue <- snakemake@wildcards[[1]]
datas_fp <- lapply(snakemake@input, normalizePath)
print(snakemake@input)
cat('\n\n\n\n')
print(datas_fp)
if(length(datas_fp) == 3){
}else if(length(datas_fp) == 2){
}else{
stop('The input has to contain either 2 or 3 files, corresponding (in order) to coordinates, and then either intra+para data (in 1 file), or intra and paraview (2 files). ', length(datas_fp), ' files were given:\n', paste(datas_fp, collapse = ' '))
}
sample <- snakemake@wildcards$sample
output_fp <- snakemake@output[[1]]
}else{
tissue <- 'brain'
coord_fp <- normalizePath(paste('results/ST/Misty/', tissue, '_coordinates.csv', sep=""))
celltype_fp <- normalizePath(paste('results/ST/ST_', tissue, '_deconvoluted.csv', sep=""))
pathways_fp <- normalizePath(paste('results/ST/functional/', tissue, '_activities_pathways.csv', sep=""))
tf_fp <- normalizePath(paste('results/ST/functional/', tissue, '_activities_TFs.csv', sep=""))
sample <- "Sample_159_B1"
output_fp <- paste('results/ST/Misty/', tissue,'/', sample, '/celltype_view.rds', sep = '')
datas_fp <- list(coord = coord_fp, cellprop = celltype_fp)
}
view <- gsub('_view.rds','', basename(output_fp))
datas <- lapply(datas_fp, function(fp){
data <- read_csv(fp)
data <- data %>% column_to_rownames(var = colnames(data)[1])
})
datas[[1]] <- datas[[1]] %>% filter(library_id == sample)
View(datas)
View(datas[["coord"]])
View(datas[["coord"]])
View(datas[["cellprop"]])
datas[2:length(datas)] <- lapply(datas[2:length(datas)], function(data){
data <- data[rownames(datas[[1]]),]
})
View(datas[["coord"]])
View(datas[["cellprop"]])
if(nrow(datas[[1]]) < 1) stop('There are no spots for sample ', sample, ' in the provided coordinates file:\n', datas_fp[[1]])
centroid <- round(colMeans(datas[[1]] %>% select(array_col, array_row)))
#%>% filter(array_col %in% (centroid[1]-18):(centroid[1]+18) &  array_row %in% (centroid[2]-18):(centroid[2]+18)) %>%
spots <- datas[[1]] %>% select(x,y)
#calculate the distance between selected spots
dM <- dist(spots, method = "euclidean", diag = TRUE, upper = TRUE, p = 2) %>% unique() %>% sort()
#shift by one and subtract
d <- abs(dM[1:(length(dM)-1)] - dM[2:length(dM)])
#average of shortest distances
radius <- dM[1:which(d > 0.1 * dM[1])[1]] %>% mean() %>% round()
cat('The distance between spots is', as.character(radius), '\n')
cat('Using', as.character(2*radius), 'as l parameter in paraview creation\n')
view <- dirname(output_fp)
output_fp <- paste('results/ST/Misty/', tissue,'/celltype/', sample,'_view.rds', sep = '')
view <- dirname(output_fp)
view <- dirname(output_fp) %>% basename()
datas <- lapply(datas_fp, function(fp){
data <- read_csv(fp)
data <- data %>% column_to_rownames(var = colnames(data)[1])
})
datas[[1]] <- datas[[1]] %>% filter(library_id == sample)
datas[2:length(datas)] <- lapply(datas[2:length(datas)], function(data){
data <- data[rownames(datas[[1]]),]
})
if(nrow(datas[[1]]) < 1) stop('There are no spots for sample ', sample, ' in the provided coordinates file:\n', datas_fp[[1]])
centroid <- round(colMeans(datas[[1]] %>% select(array_col, array_row)))
#%>% filter(array_col %in% (centroid[1]-18):(centroid[1]+18) &  array_row %in% (centroid[2]-18):(centroid[2]+18)) %>%
spots <- datas[[1]] %>% select(x,y)
#calculate the distance between selected spots
dM <- dist(spots, method = "euclidean", diag = TRUE, upper = TRUE, p = 2) %>% unique() %>% sort()
#shift by one and subtract
d <- abs(dM[1:(length(dM)-1)] - dM[2:length(dM)])
#average of shortest distances
radius <- dM[1:which(d > 0.1 * dM[1])[1]] %>% mean() %>% round()
cat('The distance between spots is', as.character(radius), '\n')
cat('Using', as.character(2*radius), 'as l parameter in paraview creation\n')
# TODO: redo this for all three views for this project
if(view == 'functional' | view == 'pathwaysCT'){
intra.view <- create_initial_view(datas[[2]])
para.view <- create_initial_view(datas[[3]]) %>% add_paraview(datas[[1]] %>% select(x,y), l = radius * 2)
para.view <- para.view %>% rename_view(., old.name = 'intraview', new.name = 'intra_act')
para.view <- within(para.view, rm(misty.uniqueid))
misty.views <- intra.view %>% add_views(new.views = para.view)
}else if (view == 'celltype'){
misty.views <- create_initial_view(datas[[2]]) %>% add_paraview(datas[[1]] %>% select(x,y), l = radius * 2)
mask <- misty.views$intraview$data %>% transmute_all(function(x){x > 0.05})
misty.views <- misty.views %>% add_views(., create_view('mask', mask))
}
# MISTy
library(mistyR)
library(future)
# data manipulation
library(tidyverse)
library(purrr)
library(distances)
if(exists("snakemake")){
tissue <- snakemake@wildcards[[1]]
datas_fp <- lapply(snakemake@input, normalizePath)
print(snakemake@input)
cat('\n\n\n\n')
print(datas_fp)
if(length(datas_fp) == 3){
}else if(length(datas_fp) == 2){
}else{
stop('The input has to contain either 2 or 3 files, corresponding (in order) to coordinates, and then either intra+para data (in 1 file), or intra and paraview (2 files). ', length(datas_fp), ' files were given:\n', paste(datas_fp, collapse = ' '))
}
sample <- snakemake@wildcards$sample
if('cellprop_cutoff' %in% names(snakemake@params)){
cellprop_cutoff <- snakemake@params$cellprop_cutoff
}
output_fp <- snakemake@output[[1]]
}else{
tissue <- 'brain'
view_type <- 'CTpathways'
coord_fp <- normalizePath(paste('results/ST/Misty/', tissue, '_coordinates.csv', sep=""))
celltype_fp <- normalizePath(paste('results/ST/ST_', tissue, '_deconvoluted.csv', sep=""))
pathways_fp <- normalizePath(paste('results/ST/functional/', tissue, '_activities_pathways.csv', sep=""))
tf_fp <- normalizePath(paste('results/ST/functional/', tissue, '_activities_TFs.csv', sep=""))
sample <- "Sample_159_B1"
output_fp <- paste('results/ST/Misty/', tissue,'/', view_type, '/', sample,'_view.rds', sep = '')
datas_fp <- list(coord = coord_fp, cellprop = celltype_fp)
datas_fp <- list(coord = coord_fp, cellprop = celltype_fp, pathways = pathways_fp)
}
view <- dirname(output_fp) %>% basename()
datas <- lapply(datas_fp, function(fp){
data <- read_csv(fp)
data <- data %>% column_to_rownames(var = colnames(data)[1])
})
datas[[1]] <- datas[[1]] %>% filter(library_id == sample)
datas[2:length(datas)] <- lapply(datas[2:length(datas)], function(data){
data <- data[rownames(datas[[1]]),]
})
if(nrow(datas[[1]]) < 1) stop('There are no spots for sample ', sample, ' in the provided coordinates file:\n', datas_fp[[1]])
centroid <- round(colMeans(datas[[1]] %>% select(array_col, array_row)))
#%>% filter(array_col %in% (centroid[1]-18):(centroid[1]+18) &  array_row %in% (centroid[2]-18):(centroid[2]+18)) %>%
spots <- datas[[1]] %>% select(x,y)
#calculate the distance between selected spots
dM <- dist(spots, method = "euclidean", diag = TRUE, upper = TRUE, p = 2) %>% unique() %>% sort()
#shift by one and subtract
d <- abs(dM[1:(length(dM)-1)] - dM[2:length(dM)])
#average of shortest distances
radius <- dM[1:which(d > 0.1 * dM[1])[1]] %>% mean() %>% round()
cat('The distance between spots is', as.character(radius), '\n')
cat('Using', as.character(2*radius), 'as l parameter in paraview creation\n')
# TODO: redo this for all three views for this project
if(view == 'functional' | view == 'pathwaysCT' | view == 'CTpathways'){
intra.view <- create_initial_view(datas[[2]])
para.view <- create_initial_view(datas[[3]]) %>% add_paraview(datas[[1]] %>% select(x,y), l = radius * 2)
para.view <- para.view %>% rename_view(., old.name = 'intraview', new.name = 'intra_act')
para.view <- within(para.view, rm(misty.uniqueid))
misty.views <- intra.view %>% add_views(new.views = para.view)
}
if (view == 'celltype'| view == 'CTpathways'){
if (view == 'celltype'){
misty.views <- create_initial_view(datas[[2]]) %>% add_paraview(datas[[1]] %>% select(x,y), l = radius * 2)
}
mask <- misty.views$intraview$data %>% transmute_all(function(x){x >= cellprop_cutoff})
misty.views <- misty.views %>% add_views(., create_view('mask', mask))
}
if (view == 'celltype'){
misty.views <- create_initial_view(datas[[2]]) %>% add_paraview(datas[[1]] %>% select(x,y), l = radius * 2)
}
mask <- misty.views$intraview$data %>% transmute_all(function(x){x >= cellprop_cutoff})
misty.views$intraview$data
cellprop_cutoff <- 0.05
if (view == 'celltype'| view == 'CTpathways'){
if (view == 'celltype'){
misty.views <- create_initial_view(datas[[2]]) %>% add_paraview(datas[[1]] %>% select(x,y), l = radius * 2)
}
mask <- misty.views$intraview$data %>% transmute_all(function(x){x >= cellprop_cutoff})
misty.views <- misty.views %>% add_views(., create_view('mask', mask))
}
para.name <- names(misty.views)[grepl('para', names(misty.views))]
misty.views <- misty.views %>% rename_view(., old.name = para.name, new.name = 'paraview', new.abbrev = 'para')
View(misty.views)
rm(cellprop_cutoff, celltype_fp, centroid, coord_fp, d, dM, output_fp, para.name, pathways_fp, radius, sample, tf_fp, tissue, view, view_type, datas, datas_fp, intra.view, mask, para.view, spots)
#files for testing in Rstudio
rs <- 42
bypass_intra <- TRUE
cores <- 6
output_dir <- "mistyTest"
view_type <- 'CTpathways'
cat("DEBUG: setting multisession plan\n")
#defining parallelisation
plan(multisession, workers = cores)
lapply(names(misty.views), function(view){
if(view != 'misty.uniqueid'){
colnames(misty.views[[view]]$data) <<- gsub("[[:punct:]]", "", colnames(misty.views[[view]]$data))
}
return()
})
if(view_type == 'celltype' | view_type == 'CTpathways'){
lapply(colnames(misty.views$intraview$data), function(target){
temp.views <- misty.views %>% filter_views(NA, view = 'mask', .data[[target]]) %>% remove_views('mask')
if(temp.views$intraview$data %>% nrow() < 20) return()
views <- names(misty.views)[!grepl("misty.uniqueid|mask", names(misty.views))]
names(temp.views[views]) %>% lapply(function(current.view){
keep.columns <- temp.views[[current.view]]$data %>% summarise(across(where(is.numeric), var)) %>% t() %>% as.data.frame() %>%
filter(V1 > 0) %>% row.names()
cat(length(keep.columns), '\n')
if(current.view == 'intraview'){
keep.columns <- unique(c(keep.columns, target))
}
temp.views[[current.view]]$data <<- temp.views[[current.view]]$data[keep.columns]
return()
})
# temp.views %>% run_misty(results.folder = paste(output_dir, target, sep = '/'), seed = rs, bypass.intra = bypass_intra, verbose = FALSE, target.subset = target)
})
}else{
misty.views %>% run_misty(results.folder = output_dir, seed = rs, bypass.intra = bypass_intra, verbose = FALSE)
}
if(exists("snakemake")){
tissue <- snakemake@wildcards[[1]]
datas_fp <- lapply(snakemake@input, normalizePath)
print(snakemake@input)
cat('\n\n\n\n')
print(datas_fp)
if(length(datas_fp) == 3){
}else if(length(datas_fp) == 2){
}else{
stop('The input has to contain either 2 or 3 files, corresponding (in order) to coordinates, and then either intra+para data (in 1 file), or intra and paraview (2 files). ', length(datas_fp), ' files were given:\n', paste(datas_fp, collapse = ' '))
}
sample <- snakemake@wildcards$sample
if('cellprop_cutoff' %in% names(snakemake@params)){
cellprop_cutoff <- snakemake@params$cellprop_cutoff
}
output_fp <- snakemake@output[[1]]
}else{
tissue <- 'brain'
view_type <- 'CTpathways'
coord_fp <- normalizePath(paste('results/ST/Misty/', tissue, '_coordinates.csv', sep=""))
celltype_fp <- normalizePath(paste('results/ST/ST_', tissue, '_deconvoluted.csv', sep=""))
pathways_fp <- normalizePath(paste('results/ST/functional/', tissue, '_activities_pathways.csv', sep=""))
tf_fp <- normalizePath(paste('results/ST/functional/', tissue, '_activities_TFs.csv', sep=""))
sample <- "Sample_159_B1"
output_fp <- paste('results/ST/Misty/', tissue,'/', view_type, '/views/', sample,'_view.rds', sep = '')
cellprop_cutoff <- 0.05
datas_fp <- list(coord = coord_fp, cellprop = celltype_fp)
datas_fp <- list(coord = coord_fp, cellprop = celltype_fp, pathways = pathways_fp)
}
output_fp
view <- output_fp %>% dirname() %>% dirname() %>% basename()
install.packages('rjson')
if(exists("snakemake")){
view_fp <- snakemake@input$view
output_fp <- snakemake@output[[1]]
}else{
view_fp <- 'results/ST/Misty/brain/Sample_158_C1/celltype_view.rds'
output_fp <- 'test.json'
}
misty.views <- readRDS(view_fp)
if(exists("snakemake")){
view_fp <- snakemake@input$view
output_fp <- snakemake@output[[1]]
}else{
view_fp <- 'results/ST/Misty/brain/Sample_158_C1/celltype_view.rds'
output_fp <- 'test.json'
}
misty.views <- readRDS(view_fp)
view_fp <- 'results/ST/Misty/brain/celltype/views/Sample_158_C1_view.rds'
misty.views <- readRDS(view_fp)
View(misty.views)
names(misty.views)[!grepl("misty.uniqueid|mask", names(misty.views))]
test <- misty.views %>%  [names(misty.views)[!grepl("misty.uniqueid|mask", names(misty.views))]]
test <- misty.views[names(misty.views)[!grepl("misty.uniqueid|mask", names(misty.views))]]
View(test)
view_fp <- 'results/ST/Misty/brain/CTpathways/views/Sample_158_C1_view.rds'
misty.views <- readRDS(view_fp)
test <- misty.views[names(misty.views)[!grepl("misty.uniqueid|mask", names(misty.views))]]
View(test)
output <- misty.views$paraview$data
View(output)
# MISTy
library(mistyR)
library(future)
# data manipulation
library(tidyverse)
library(purrr)
library(distances)
if(exists("snakemake")){
tissue <- snakemake@wildcards[[1]]
datas_fp <- lapply(snakemake@input, normalizePath)
print(snakemake@input)
cat('\n\n\n\n')
print(datas_fp)
if(length(datas_fp) == 3){
}else if(length(datas_fp) == 2){
}else{
stop('The input has to contain either 2 or 3 files, corresponding (in order) to coordinates, and then either intra+para data (in 1 file), or intra and paraview (2 files). ', length(datas_fp), ' files were given:\n', paste(datas_fp, collapse = ' '))
}
sample <- snakemake@wildcards$sample
if('cellprop_cutoff' %in% names(snakemake@params)){
cellprop_cutoff <- snakemake@params$cellprop_cutoff
}
output_fp <- snakemake@output[[1]]
}else{
tissue <- 'brain'
view_type <- 'CTpathways'
coord_fp <- normalizePath(paste('results/ST/Misty/', tissue, '_coordinates.csv', sep=""))
celltype_fp <- normalizePath(paste('results/ST/ST_', tissue, '_deconvoluted.csv', sep=""))
pathways_fp <- normalizePath(paste('results/ST/functional/', tissue, '_activities_pathways.csv', sep=""))
tf_fp <- normalizePath(paste('results/ST/functional/', tissue, '_activities_TFs.csv', sep=""))
sample <- "Sample_159_B1"
output_fp <- paste('results/ST/Misty/', tissue,'/', view_type, '/views/', sample,'_view.rds', sep = '')
cellprop_cutoff <- 0.05
datas_fp <- list(coord = coord_fp, cellprop = celltype_fp)
datas_fp <- list(coord = coord_fp, cellprop = celltype_fp, pathways = pathways_fp)
}
view <- output_fp %>% dirname() %>% dirname() %>% basename()
datas <- lapply(datas_fp, function(fp){
data <- read_csv(fp)
data <- data %>% column_to_rownames(var = colnames(data)[1])
})
View(datas[[1]])
datas[[1]] <- datas[[1]] %>% filter(library_id == sample)
datas[2:length(datas)] <- lapply(datas[2:length(datas)], function(data){
data <- data[rownames(datas[[1]]),]
})
if(nrow(datas[[1]]) < 1) stop('There are no spots for sample ', sample, ' in the provided coordinates file:\n', datas_fp[[1]])
# based on image coordinates instead of rows and columns
centroid <- round(colMeans(datas[[1]] %>% select(array_col, array_row)))
#%>% filter(array_col %in% (centroid[1]-18):(centroid[1]+18) &  array_row %in% (centroid[2]-18):(centroid[2]+18)) %>%
spots <- datas[[1]] %>% select(x,y)
#calculate the distance between selected spots
dM <- dist(spots, method = "euclidean", diag = TRUE, upper = TRUE, p = 2) %>% unique() %>% sort()
#shift by one and subtract
d <- abs(dM[1:(length(dM)-1)] - dM[2:length(dM)])
#average of shortest distances
radius <- dM[1:which(d > 0.1 * dM[1])[1]] %>% mean() %>% round()
cat('The distance between spots is', as.character(radius), '\n')
cat('Using', as.character(2*radius), 'as l parameter in paraview creation\n')
# TODO: redo this for all three views for this project
if(view == 'functional' | view == 'pathwaysCT' | view == 'CTpathways'){
intra.view <- create_initial_view(datas[[2]])
para.view <- create_initial_view(datas[[3]]) %>% add_paraview(datas[[1]] %>% select(x,y), l = radius * 2)
para.view <- para.view %>% rename_view(., old.name = 'intraview', new.name = 'intra_act')
para.view <- within(para.view, rm(misty.uniqueid))
misty.views <- intra.view %>% add_views(new.views = para.view)
}
if (view == 'celltype'| view == 'CTpathways'){
if (view == 'celltype'){
misty.views <- create_initial_view(datas[[2]]) %>% add_paraview(datas[[1]] %>% select(x,y), l = radius * 2)
}
mask <- misty.views$intraview$data %>% transmute_all(function(x){x >= cellprop_cutoff})
misty.views <- misty.views %>% add_views(., create_view('mask', mask))
}
para.name <- names(misty.views)[grepl('para', names(misty.views))]
misty.views <- misty.views %>% rename_view(., old.name = para.name, new.name = 'paraview', new.abbrev = 'para')
View(misty.views)
View(misty.views)
View(datas)
View(datas[["coord"]])
rownames(test) <- rownames(datas[[1]])
test <- misty.views$paraview$data
rownames(test) <- rownames(datas[[1]])
View(test)
para <- misty.views$paraview$data
rownames(para) <- rownames(datas[[1]])
View(para)
coords <- read.csv('results/ST/Misty/brain_coordinates.csv')
View(coords)
unique(coords$seurat_clusters)
